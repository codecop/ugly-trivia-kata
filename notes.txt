Retro 19.02.2015 #15

* we wanted to change the structure of the public API because it was bad.
  but we could not because the tests fixed the functionality of the methods (not the implementation).
  So maybe we should not have added tests for API if we might change it later.
  A golden master would be much better until public API is stable.
  Or we did consider it public API but it was not because play (takeTurn) is the main entry point.
  -> maybe should have started with 1) Golden Master, 2) change API from outside, 3) add tests, 4) cleanup internals
  But by cleaning internals we learned about the problem, so steps were important.
  How can we know the API before we know the problem? Need BDUF? BAnalysisUF?

* We extracted classes (that seemed reasonable), mocked them in tests and have nice unit tests.
  The real thing is a bit complex (current/players/player/ui...), so stub is right way.
  When we created the hierarchy it felt reasonable. We applied SRP and then DI.
  Now a minor change in logic needs extra stubbing. That does not feel too good, "we are tying them together even more"
  A class with mostly data (Player) was stubbed, but it has a single behaviour (showUi field).
  Should we mock/stub a almost data only class?

* We did not take a break. Maybe we should have at least after 60 minutes.
* Today more discussion than work
* Although Peter is typing less when using the small computer, but still we typed at the same time at least 3 times.
  -> find setting/tool that shows that someone is typing?

---

Retro 05.02.2015 #13

* Hard to get started, we had a philosophical discussion about why we are doing this exercise
* we are less enthusiastic than usual, maybe we need sth new
* could we do this exercise smarter? going other ways, not redoing things and tests.
  maybe staying with Golden Master gives us freedom to change more.
* Idea: stay with golden master much longer until API emerges.
* Maybe the tests are too connected to the implementation.
  So if not, then Game would be the API and all tests (unit) would go through the API and not be coupled to the implementation.
* Idea: Create exactly this app TDD or BDD style up front and verify against Golden Master?

Rethink: Why did we start this?
* we brought it sort of under test, we could go further for some classes, but it be more of the same.
* we experimented with capturing system out
* we have no idea why we started it
* we had a lot of fun

---

Retro 08.01.2015 #12

* we were both tired, but even then we did 2 Pomodoros.
* hard to stop when you are in the middle of something
* Started with planning for next session
* TODOs are valuable for getting started
* boring? maybe but would like to see the final outcome

---

Retro 11.12.2014 #11

* long time no session
* once a month should be good
* when all TODOs are done we should have a prio list for next time (or red test)
  (but when refactoring we usually do not have red tests)

Ideas what to do next:
* fix TODOs
* look at coverage, look at PIT coverage - can we improve tests
* use Texttest as another experiment Golden Master experiment
  (as branch from the original code and then move forward and see if we broke stuff)
  similar to branch "exercise-golden-master" - see where it starts and create a similar one up front, then merge into head when it is finished

---

Session 19.09.2014 #10
Session 13.06.2014 #9
Session 27.03.2014 #8
Session 06.03.2014 #7
Session 13.02.2014 #6
Session 24.01.2014 #5 or 6 ?
Session 10.01.2014 #5
Session 03.01.2014 #4
Session 27.12.2013 #3
Session 25.06.2013 #2

---

Session 24.05.2013 #1
* started the session as refactoring exercise after GeeCON 2013.

---
